«IMPORT gpresentation»
«IMPORT gcore»
«EXTENSION AccessHelper»
«EXTENSION GcoreAccessHelper»
«EXTENSION Profile»


«DEFINE Head FOR PRoot -»
«IF hasJSFHeadMetaData() -»
<!DOCTYPE «getJSFDoctype() -»>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:ui="http://java.sun.com/jsf/facelets">
<h:head>
  <meta http-equiv="Content-Type" content="text/html; charset=«getJSFContenttype() -»" /> 
  <title>«getJSFTitle() -»</title>
  <meta name="description" content="«getJSFDescription() -»" />
  <meta name="keywords" content="«FOREACH getJSFKeywords() AS k SEPARATOR ', ' -»«k -»«ENDFOREACH -»" />
  <meta name="language" content="«getJSFLanguage() -»" />
  «FOREACH getJSFStylesheets() AS stylesheet -» 
  <link rel="stylesheet" type="text/css" href="«stylesheet -»" />
  «ENDFOREACH -»
</h:head>
<h:body>
  «EXPAND Root::Content FOREACH nestedContents -»
</h:body>
</html>
«ENDIF -»
«ENDDEFINE»


«DEFINE AutoForm FOR PAutomaticallyGeneratedArea -»
«IF hasJSFAutoForm() -»
<h:form«EXPAND universalAttrs -»>
«LET getMClassByXmiGuid(getJSFAutoFormModel()) AS model -»
«IF getJSFAutoFormType() == 'SAVE_OR_UPDATE' -»«EXPAND AutoFormSaveOrUpdate(model) -»
«ELSEIF getJSFAutoFormType() == 'LIST' -»«EXPAND AutoFormList(model) -»
«ELSEIF getJSFAutoFormType() == 'SHOW' -»«EXPAND AutoFormShow(model) -»
«ENDIF -»
«ENDLET -»
</h:form>
«ENDIF -»
«ENDDEFINE»


«DEFINE AutoFormSaveOrUpdate(MClass model) FOR PAutomaticallyGeneratedArea -»
«EXPAND AutoFormFieldFrame(model, false) FOREACH autoFormProperties() -»
<p><h:commandButton value="Submit" action="#{«getBeanMethodNameForSave(model)»}"«EXPAND universalAttrs -»/></p>
«ENDDEFINE»


«DEFINE AutoFormList(MClass model) FOR PAutomaticallyGeneratedArea -»
<h:dataTable value="#{«getBeanPropertyNameForList(model)»}" var="n">
  <h:column>
    <f:facet name="header">«model.name»</f:facet>
    #{n.value}
  </h:column>
  
  <h:column>
    <h:commandButton value="Anzeigen" action="#{«getBeanMethodNameForShow(model)»}">
	  <f:setPropertyActionListener target="#{«getBeanPropertyNameForSelect(model)»}" value="#{n.key}" />
    </h:commandButton>
    <h:commandButton value="Bearbeiten" action="#{«getBeanMethodNameForUpdate(model)»}">
	  <f:setPropertyActionListener target="#{«getBeanPropertyNameForSelect(model)»}" value="#{n.key}" />
    </h:commandButton>
    <h:commandButton value="Löschen" action="#{«getBeanMethodNameForDelete(model)»}">
	  <f:setPropertyActionListener target="#{«getBeanPropertyNameForSelect(model)»}" value="#{n.key}" />
    </h:commandButton>
  </h:column>
</h:dataTable>
<h:commandButton value="Anlegen" action="#{«getBeanMethodNameForCreate(model)»}"/>
«ENDDEFINE»


«DEFINE AutoFormShow(MClass model) FOR PAutomaticallyGeneratedArea -»
«EXPAND AutoFormFieldFrame(model, true) FOREACH autoFormProperties() -»
<p><h:commandButton value="Liste" action="#{«getBeanMethodNameForList(model)»}"«EXPAND universalAttrs -»/></p>
«ENDDEFINE»


«DEFINE AutoFormFieldFrame(MClass model, boolean readonly) FOR MProperty -»
«IF !stereotype.name.contains("ignore") -»
<p>
<h:outputLabel>
«taggedValue.selectFirst(e|e.tag.name == "label" && e.tag.stereotype.name == "label").value»
«IF type == MAttribute -»
«EXPAND AutoFormField(model, readonly) FOR (MAttribute) this -» 
«ELSE -»
«EXPAND AutoFormField(model, readonly) FOR (MAssociationRole) this -» 
«ENDIF -»
</h:outputLabel>
</p>
«ENDIF -»
«ENDDEFINE»


«DEFINE AutoFormField(MClass model, boolean readonly) FOR MAttribute -»
«LET readonly ? 'readonly="true"' : '' AS readonlyaddon -»
«IF type == getMElementByXmiGuid("Boolean") -»
«LET readonly ? 'onclick="return false" onkeydown="return false"' : '' AS readonlyaddon -»
<h:selectBooleanCheckbox value="#{«getBeanPropertyName(model)»}" «readonlyaddon»/>
«ENDLET -»
«ELSEIF type == getMElementByXmiGuid("Date")-»
<h:inputText value="#{«getBeanPropertyName(model)»}" «readonlyaddon»><f:convertDateTime pattern="dd.MM.yyyy"/></h:inputText>
«ELSE -»
<h:inputText value="#{«getBeanPropertyName(model)»}" «readonlyaddon»/>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«DEFINE AutoFormField(MClass model, boolean readonly) FOR MAssociationRole -»
«LET readonly ? 'onclick="return false" onkeydown="return false"' : '' AS readonlyaddon -»
«IF multiplicity == 1 -»
<h:selectOneListbox value="#{«getBeanPropertyNameForSelect()»}" id="«name»" «readonlyaddon»>
  <f:selectItems value="#{«getBeanPropertyName(model)».entrySet()}" var="n" itemValue="#{n.key}" itemLabel="#{n.value}"/>
</h:selectOneListbox>
«ELSE -»
<h:selectManyCheckbox value="#{«getBeanPropertyNameForSelect()»}" id="«name»" layout="pageDirection" «readonlyaddon»>
  <f:selectItems value="#{«getBeanPropertyName(model)».entrySet()}" var="n" itemValue="#{n.key}" itemLabel="#{n.value}"/>
</h:selectManyCheckbox>
«ENDIF -»
«ENDLET -»
«ENDDEFINE»


«DEFINE Include FOR PReferenceArea -»
<ui:include src="«target.name»"></ui:include>
«ENDDEFINE»


«DEFINE Div FOR PCompositeArea -»
«IF hasJSFDiv() -»
<div«EXPAND universalAttrs -»>
  «EXPAND Root::Content FOREACH nestedContents -»
</div>
«ENDIF -»
«ENDDEFINE»


«DEFINE Div FOR PElementArea -»
«IF hasJSFDiv() -»
<div«EXPAND universalAttrs -»>
  «EXPAND Root::Element FOREACH nestedElements -»
</div>
«ENDIF -»
«ENDDEFINE»


«DEFINE Div FOR PCompositeElement -»
«IF hasJSFDiv() -»
<div«EXPAND universalAttrs -»>
  «EXPAND Root::Element FOREACH nestedElements -»
</div>
«ENDIF -»
«ENDDEFINE»


«DEFINE P FOR PCompositeElement -»
«IF hasJSFParagraph() -»
<p«EXPAND universalAttrs -»>
  «EXPAND Root::Element FOREACH nestedElements -»
</p>
«ENDIF -»
«ENDDEFINE»


«DEFINE Link FOR PCompositeElement -»
«IF hasJSFLink() -»
«IF !hasOwningElementWith(prJSFForm()) -»
<h:form>
«ENDIF -»
<h:commandLink action="#{«getOutcome()»}"«EXPAND optionalAttr(prJSFLink(), prJSFTarget()) -»«EXPAND universalAttrs -»>
  «EXPAND Root::Element FOREACH nestedElements -»
</h:commandLink>
«IF !hasOwningElementWith(prJSFForm()) -»
</h:form>
«ENDIF -»
«ENDIF -»
«ENDDEFINE»


«DEFINE H FOR PCompositeElement -»
«IF hasJSFHeading() -»
<h«getJSFHeadingLevel() -»«EXPAND universalAttrs -»>
  «EXPAND Root::Element FOREACH nestedElements -»
</h«getJSFHeadingLevel() -»>
«ENDIF -»
«ENDDEFINE»


«DEFINE Form FOR PCompositeElement -»
«IF hasJSFForm() -»
<h:form«EXPAND universalAttrs -»>
  «EXPAND Root::Element FOREACH nestedElements -»
</h:form>
«ENDIF -»
«ENDDEFINE»


«DEFINE Fieldset FOR PCompositeElement -»
«IF hasJSFFieldset() -»
<fieldset«EXPAND universalAttrs -»>
  <legend>«name -»</legend>
  «EXPAND Root::Element FOREACH nestedElements -»
</fieldset>
«ENDIF -»
«ENDDEFINE»


«DEFINE InputText FOR PInput -»
«IF hasJSFInputText() -»
«EXPAND Label -»
<h:inputText value="#{«getInputValue()»}"«EXPAND inputAttrs -»
«IF hasJSFInputElementDatePattern() -»
><f:convertDateTime pattern="«getJSFInputElementDatePattern()»" /></h:inputText>
«ELSE -»
/>
«ENDIF -»
«ENDIF -»
«ENDDEFINE»


«DEFINE Checkbox FOR PInput -»
«IF hasJSFCheckbox() -»
«IF hasJSFInputElementItems() -»
<h:selectManyCheckbox value="#{«getInputValue()»}"«EXPAND inputAttrs -» layout="pageDirection">
  <f:selectItems value="#{«getSelectItemsValue()».entrySet()}" var="n" itemValue="#{n.key}" itemLabel="#{n.value}"/>
</h:selectManyCheckbox>
«ELSE -»
<h:outputLabel>
<h:selectBooleanCheckbox value="#{«getInputValue()»}"«EXPAND inputAttrs -»/>
«getJSFInputElementLabel() -»
</h:outputLabel>
«ENDIF -»
«ENDIF -»
«ENDDEFINE»


«DEFINE Listbox FOR PInput -»
«IF hasJSFListbox() -»
«EXPAND Label -»
<h:selectOneListbox value="#{«getInputValue()»}"«EXPAND inputAttrs -»>
  <f:selectItems value="#{«getSelectItemsValue()».entrySet()}" var="n" itemValue="#{n.key}" itemLabel="#{n.value}"/>
</h:selectOneListbox>
«ENDIF -»
«ENDDEFINE»


«DEFINE P FOR POutput -»
«IF hasJSFParagraph() -»
<p«EXPAND universalAttrs -»>«output -»</p>
«ENDIF -»
«ENDDEFINE»


«DEFINE H FOR POutput -»
«IF hasJSFHeading() -»
<h«getJSFHeadingLevel() -»«EXPAND universalAttrs -»>«output -»</h«getJSFHeadingLevel() -»>
«ENDIF -»
«ENDDEFINE»


«DEFINE SimpleText FOR POutput -»
«IF hasJSFSimpleText() -»
«output»
«ENDIF -»
«ENDDEFINE»


«DEFINE Link FOR PAction -»
«IF hasJSFLink() -»
«IF !hasOwningElementWith(prJSFForm()) -»
<h:form>
«ENDIF -»
<h:commandLink action="#{«getOutcome()»}"«EXPAND optionalAttr(prJSFLink(), prJSFTarget()) -»«EXPAND universalAttrs -»>«getJSFCommandElementText()»</h:commandLink>
«IF !hasOwningElementWith(prJSFForm()) -»
</h:form>
«ENDIF -»
«ENDIF -»
«ENDDEFINE»


«DEFINE Button FOR PAction -»
«IF hasJSFButton() -»
«IF !hasOwningElementWith(prJSFForm()) -»
<h:form>
«ENDIF -»
<h:commandButton value="«getJSFCommandElementText()»" action="#{«getOutcome()»}"«EXPAND universalAttrs -»/>
«IF !hasOwningElementWith(prJSFForm()) -»
</h:form>
«ENDIF -»
«ENDIF -»
«ENDDEFINE»


«DEFINE universalAttrs FOR PMetaDataAware -»
«EXPAND optionalAttr(prJSFElement(), prJSFClass()) -»«EXPAND optionalAttr(prJSFElement(), prJSFId()) -»«EXPAND optionalAttr(prJSFElement(), prJSFStyle()) -»
«ENDDEFINE»


«DEFINE inputAttrs FOR PElement -»
«EXPAND optionalAttr(prJSFElement(), prJSFClass()) -» id="«name -»"«EXPAND optionalAttr(prJSFElement(), prJSFStyle()) -»
«ENDDEFINE»


«DEFINE optionalAttr(String stereotyp, String taggedValue) FOR PMetaDataAware -»
«LET hasTaggedValue(stereotyp, taggedValue) ? ' ' + taggedValue + '="' + getTaggedValue(stereotyp, taggedValue) + '"' : '' AS v -»
«v -»
«ENDLET -»
«ENDDEFINE»

«DEFINE Label FOR PElement -»
<h:outputLabel for="«name -»" value="«getJSFInputElementLabel() -»"/>
«ENDDEFINE»