import gpresentation;
import gcore;
extension Profile;


boolean hasHTMLHeadMetaData(PMetaDataAware this) :
	hasPMetaData( prHTMLHeadMetaData() );
	
String getHTMLDoctype(PMetaDataAware this) :
	getTaggedValue(prHTMLHeadMetaData(), prHTMLDoctype());
	
String getHTMLContenttype(PMetaDataAware this) :
	getTaggedValue(prHTMLHeadMetaData(), prHTMLContenttype());
	
String getHTMLTitle(PMetaDataAware this) :
	getTaggedValue(prHTMLHeadMetaData(), prHTMLTitle());
	
String getHTMLDescription(PMetaDataAware this) :
	getTaggedValue(prHTMLHeadMetaData(), prHTMLDescription());
	
List[String] getHTMLKeywords(PMetaDataAware this) :
	getTaggedValues(prHTMLHeadMetaData(), prHTMLKeywords());
	
String getHTMLLanguage(PMetaDataAware this) :
	getTaggedValue(prHTMLHeadMetaData(), prHTMLLanguage());
	
List[String] getHTMLStylesheets(PMetaDataAware this) :
	getTaggedValues(prHTMLHeadMetaData(), prHTMLStylesheets());
	
boolean hasHTMLDiv(PMetaDataAware this) :
	hasPMetaData(prHTMLDiv());
	
boolean hasHTMLAutoForm(PMetaDataAware this) :
	hasPMetaData(prHTMLAutoForm());
	
String getHTMLFormAction(PMetaDataAware this) : 
	getTaggedValue(prHTMLForm(), prHTMLAction());
	
boolean hasHTMLAutoFormField(PMetaDataAware this) :
	hasTaggedValue(prHTMLAutoForm(), prHTMLField());
	
List[String] getHTMLAutoFormField(PMetaDataAware this) :
	getTaggedValues(prHTMLAutoForm(), prHTMLField());
	
String getHTMLAutoFormModel(PMetaDataAware this) :
	getTaggedValue(prHTMLAutoForm(), prHTMLModel());
	
String getHTMLAutoFormInclude(PMetaDataAware this) :
	getTaggedValues(prHTMLAutoForm(), prHTMLInclude());
	
boolean hasHTMLParagraph(PMetaDataAware this) :
	hasPMetaData(prHTMLParagraph());
	
boolean hasHTMLHeading(PMetaDataAware this) :
	hasPMetaData(prHTMLHeading());
	
String getHTMLHeadingLevel(PMetaDataAware this) :
	getTaggedValue(prHTMLHeading(), prHTMLLevel());
	
boolean hasHTMLLink(PMetaDataAware this) :
	hasPMetaData(prHTMLLink());
	
String getHTMLLinkExtern(PMetaDataAware this) :
	getTaggedValue(prHTMLLink(), prHTMLExtern());
	
boolean hasHTMLForm(PMetaDataAware this) :
	hasPMetaData(prHTMLForm());
	
boolean hasHTMLSelect(PMetaDataAware this) :
	hasPMetaData(prHTMLSelect());
	
boolean hasHTMLFieldset(PMetaDataAware this) :
	hasPMetaData(prHTMLFieldset());
	
boolean hasHTMLTextField(PMetaDataAware this) :
	hasPMetaData(prHTMLTextField());
	
boolean hasHTMLCheckbox(PMetaDataAware this) :
	hasPMetaData(prHTMLCheckbox());
	
String getHTMLInputElementValue(PMetaDataAware this) :
	getTaggedValue(prHTMLInputElement(), prHTMLValue());
	
String getHTMLInputElementLabel(PMetaDataAware this) :
	getTaggedValue(prHTMLInputElement(), prHTMLLabel());
	
boolean hasHTMLOption(PMetaDataAware this) :
	hasPMetaData(prHTMLOption());
	
boolean hasHTMLAnchor(PMetaDataAware this) :
	hasPMetaData(prHTMLAnchor());
	
boolean hasHTMLSimpleText(PMetaDataAware this) :
	hasPMetaData(prHTMLSimpleText());
	
String getHTMLLinkText(PMetaDataAware this) :
	getTaggedValue(prHTMLLink(), prHTMLText());
	
boolean hasHTMLSubmit(PMetaDataAware this) :
	hasPMetaData(prHTMLSubmit());
	
	
boolean hasJSFHeadMetaData(PMetaDataAware this) :
	hasPMetaData( prJSFHeadMetaData() );
	
String getJSFDoctype(PMetaDataAware this) :
	getTaggedValue(prJSFHeadMetaData(), prJSFDoctype());
	
String getJSFContenttype(PMetaDataAware this) :
	getTaggedValue(prJSFHeadMetaData(), prJSFContenttype());
	
String getJSFTitle(PMetaDataAware this) :
	getTaggedValue(prJSFHeadMetaData(), prJSFTitle());
	
String getJSFDescription(PMetaDataAware this) :
	getTaggedValue(prJSFHeadMetaData(), prJSFDescription());
	
List[String] getJSFKeywords(PMetaDataAware this) :
	getTaggedValues(prJSFHeadMetaData(), prJSFKeywords());
	
String getJSFLanguage(PMetaDataAware this) :
	getTaggedValue(prJSFHeadMetaData(), prJSFLanguage());
	
List[String] getJSFStylesheets(PMetaDataAware this) :
	getTaggedValues(prJSFHeadMetaData(), prJSFStylesheets());
	
boolean hasJSFDiv(PMetaDataAware this) :
	hasPMetaData( prJSFDiv() );
	
boolean hasJSFParagraph(PMetaDataAware this) :
	hasPMetaData( prJSFParagraph() );
	
boolean hasJSFLink(PMetaDataAware this) :
	hasPMetaData( prJSFLink() );
	
boolean hasJSFHeading(PMetaDataAware this) :
	hasPMetaData( prJSFHeading() );
	
String getJSFHeadingLevel(PMetaDataAware this) :
	getTaggedValue(prJSFHeading(), prJSFLevel());
	
String getJSFLinkText(PMetaDataAware this) :
	getTaggedValue(prJSFLink(), prJSFText());
	
boolean hasJSFSimpleText(PMetaDataAware this) :
	hasPMetaData( prJSFSimpleText() );


boolean hasPMetaData(PMetaDataAware this, String uri) :
	this.metaData.exists( e | e.uri == uri);

boolean hasTaggedValue(PMetaDataAware this, String uri, String key) :
	this.value.exists( e | e.key.key == key && e.key.owner.uri == uri );

String getTaggedValue(PMetaDataAware this, String uri, String key) :
	hasTaggedValue(uri, key) ? 
		this.value.selectFirst( e | e.key.key == key && e.key.owner.uri == uri ).value : 
		"";
 
List[String] getTaggedValues(PMetaDataAware this, String uri, String key) :
	hasTaggedValue(uri, key) ? 
		this.value.select( e | e.key.key == key && e.key.owner.uri == uri ).collect(e | e.value) : 
		{};
		
	
MModel globalVarGcoreModel() :
	GLOBALVAR coremodel;

List[MAttribute] allProperties(MClass this):
	{}.addAll( hasGeneralization() ? 
				getGeneralization().property : 
				{} )
	  .addAll( property )
	  .addAll( hasRealization() ? 
				getRealization().property : 
				{} );
			
boolean hasGeneralization(MClass this) :
	!generalization.isEmpty;
	
List[MClass] getGeneralization(MClass subclass):
	( subclass.hasGeneralization() ? 
		subclass.generalization.getGeneralization() : 
		{} ).addAll(subclass.generalization);
	
List[MClass] getGeneralization(MType subclass) : {};
	
boolean hasRealization(MClass this) :
	!globalVarGcoreModel().nestedPackage.classifier.typeSelect(MClass).select(e|e.generalization.contains(this)).isEmpty;

List[MClass] getRealization(MClass superclass):
	( superclass.hasRealization() ? 
		superclass.realization().getRealization() : 
		{} ).addAll(superclass.realization());

List[MClass] getRealization(MType subclass) : {};

List[MClass] realization(MClass this) :
	globalVarGcoreModel().nestedPackage.classifier.typeSelect(MClass).select(e|e.generalization.contains(this));