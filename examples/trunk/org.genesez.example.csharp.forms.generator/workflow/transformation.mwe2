module org.genesez.example.csharp.forms

var uml2setup = org.genesez.adapter.uml2.workflow.UmlSetup {
	standardUML2Setup = true
}
var gcore = org.eclipse.xtend.typesystem.emf.EmfMetaModel {
	metaModelPackage = "org.genesez.metamodel.gcore.GcorePackage"
}
var uml = org.eclipse.xtend.typesystem.uml2.UML2MetaModel {}

var applicationproject.dir = "../org.genesez.example.csharp.forms"

Workflow {
	// read the uml2 model file
	component = org.genesez.workflow.EmfReader {
		file = "${applicationproject.dir}/model-exp/Forms_Example.uml"
		slot = "uml2model"
	}
	// validate the uml2 model for transformability
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = uml
		slot = "uml2model"
		
		validator = org.genesez.adapter.uml2.workflow.UmlModelValidation {}
		validator = org.genesez.adapter.uml2.workflow.UmlStateMachineValidation {}
		validator = org.genesez.adapter.uml2.workflow.Uml2GcoreStateMachineValidation {}
	}
	// transform the uml2 model into a GeneSEZ model
	component = org.genesez.workflow.xpand.Model2ModelComponent {
		metaModel = uml
		metaModel = gcore
		slot = "uml2model"
		outputSlot = "coremodel"
		
		model2model = org.genesez.adapter.uml2.workflow.Uml2Gcore {
		}
	}
	// serialize the GeneSEZ model - just for info if you want to have a look at it
	component = org.genesez.workflow.EmfWriter {
		file = "${applicationproject.dir}/model-gen/application.xmi"
	}
	// validate the GeneSEZ model against general + java specific constraints
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = gcore
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::metamodel::core::util::validation::Constraints"
		}
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::platform::dotnet::csharp::validation::Naming"
		}
	}
	// run the java code generation and transform the model into java source code
	component = org.genesez.workflow.xpand.Model2TextSupport {
		component = org.genesez.workflow.xpand.Model2TextComponent {
			metaModel = gcore
			outputDir = "${applicationproject.dir}/src-gen"
			
			importPreserverConfig = org.genesez.platform.dotnet.workflow.CsharpImportPreserverConfig {}
			
			typeMappingFile = "org/genesez/platform/dotnet/csharp/typemapping/typemapping4csharp.xml"
			
			model2text = org.genesez.platform.dotnet.workflow.Gcore2Csharp {
			}
		}
	}
}
