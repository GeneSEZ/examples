module org.genesez.example.java.requirements.traceability.dashboard

// do uml setup
var uml2setup = org.genesez.adapter.uml2.workflow.UmlSetup {
	standardUML2Setup = true
}
// create meta model definitions
var gcore = org.eclipse.xtend.typesystem.emf.EmfMetaModel {
	metaModelPackage = "org.genesez.metamodel.gcore.GcorePackage"
}
var greq = org.eclipse.xtend.typesystem.emf.EmfMetaModel {
	metaModelPackage = "org.genesez.metamodel.greq.GreqPackage"
}
var gtrace = org.eclipse.xtend.typesystem.emf.EmfMetaModel {
	metaModelPackage = "org.genesez.metamodel.gtrace.GtracePackage"
}
var uml = org.eclipse.xtend.typesystem.uml2.UML2MetaModel {}

Workflow {
	// uml to genesez transformation
	component = org.genesez.workflow.CompositeComponent {
		// read the uml2 model file
		component = org.genesez.workflow.EmfReader {
			file = "model/forms.uml"
			slot = "uml2model"
		}
		// validate the uml2 model for transformability
		component = org.genesez.workflow.xpand.ValidatorComponent {
			metaModel = uml
			slot = "uml2model"
			
			validator = org.genesez.adapter.uml2.workflow.UmlModelValidation {}
			validator = org.genesez.adapter.uml2.workflow.UmlStateMachineValidation {}
			validator = org.genesez.adapter.uml2.workflow.Uml2GcoreStateMachineValidation {}
		}
		// transform the uml2 model into a GeneSEZ model
		component = org.genesez.workflow.xpand.Model2ModelComponent {
			metaModel = uml
			metaModel = gcore
			slot = "uml2model"
			outputSlot = "coremodel"
			
			model2model = org.genesez.adapter.uml2.workflow.Uml2Gcore {
			}
		}
	}
	
	// traceability setup
	component = org.genesez.traceability.TraceabilityComponent {
		gcoreModelFile = "../org.genesez.example.java.requirements.traceability/model/forms.xmi"
		greqModelFile = "../org.genesez.example.java.requirements.traceability/model/requirements.xmi"
		gtraceModelFile = "../org.genesez.example.java.requirements.traceability/model/requirement.traceability.xmi"
		
		/* 
			We created the traceability model in the same directory as the structure + requirements model. The 
			model element references are relative uris. The execution directory of the workflow is different
			from the directory where we created the traceability model and therefore our model references are not resolveable.
			Using uri mappings we can point emf to the right place.
			This workflow component automatically sets the right uri mappings for the default case:
			(the uri base for both referenced models is the directory of the traceability model and both models are referenced by name)
		*/
	}
	
	// prepare gcore model for java source code generation
	component = org.genesez.workflow.xpand.ModelModificationComponent {
		metaModel = gcore
		
		// annotation definition and usage, singleton design pattern and hashCode + equals operations
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::platform::java::m2m::Prepare::prepare"
		}
		// implement associations using the association library
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::platform::java::m2m::aop::AssociationLibrary::prepare"
		}
		// cares about property access operations
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::platform::java::m2m::AccessOperation::prepare"
			parameter = {
				name = "usePropertyVisibilityForAccessors"
				value = false
			}
		}
		// automatically implement abstract and interface operations in classes
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::metamodel::core::util::m2m::Realization::realize"
		}
		// add necessary use dependencies for import generation
		model2model = org.genesez.workflow.SimpleScript {
			script = "org::genesez::metamodel::core::util::m2m::UseDependencies::addUseDependencies"
		}
	}
	
	// validate the GeneSEZ model against general + java specific constraints
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = gcore
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::metamodel::core::util::validation::Constraints"
		}
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::platform::java::validation::Syntax"
		}
	}
	
	// run the java code generation and transform the model into java source code
	component = org.genesez.workflow.xpand.Model2TextSupport {
		component = org.genesez.workflow.xpand.Model2TextComponent {
			metaModel = gcore
			// we need to register the other meta models as well because of the traceability aop template
			metaModel = greq
			metaModel = gtrace
			
			// directory in which the generated files are placed
			outputDir = "../org.genesez.example.java.requirements.traceability/src-gen"
			
			importPreserverConfig = org.genesez.platform.java.workflow.JavaImportPreserverConfig {}
			postProcessor = org.genesez.platform.java.workflow.GeneSezJavaPostProcessor {}
			
			typeMappingFile = "typemapping.xml"
			
			aopTemplate = "org::genesez::platform::java::m2t::aop::AssociationLibrary"
			aopModel2Text = org.genesez.traceability.TraceabilityAopTemplate {
				template = "org::genesez::platform::java::traceability::RequirementsTraceabilityAnnotation"
			}
			
			model2text = org.genesez.platform.java.workflow.Gcore2Java {}
		}
	}
}
